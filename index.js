// Generated by CoffeeScript 1.10.0
var child, fs, path, url;

url = require("url");

path = require("path");

fs = require("fs");

child = require('child_process');

module.exports = {
  cgi: function(phproot, cmd) {
    return (function(_this) {
      return function(req, res, next) {
        req.pause();
        return _this.decideFile(req.url, phproot, function(file) {
          if (file) {
            return _this.run(file, req, res, cmd);
          } else {
            return next();
          }
        });
      };
    })(this);
  },
  decideFile: function(reqUrl, phpdir, callback) {
    var file, folder, folders, i, isPhpFile, len, parts;
    parts = url.parse(reqUrl);
    parts.pathInfo = '';
    folders = parts.pathname.split('/');
    isPhpFile = false;
    parts.pathname = '/';
    for (i = 0, len = folders.length; i < len; i++) {
      folder = folders[i];
      if (!isPhpFile) {
        parts.pathname = path.join(parts.pathname, folder);
      }
      if (isPhpFile) {
        parts.pathInfo += '/' + folder;
      } else if (/.*?\.php$/.test(folder)) {
        isPhpFile = true;
      }
    }
    file = path.join(phpdir, parts.pathname);
    if (!isPhpFile && file.substr(-1, 1) !== '/') {
      return callback(false);
    }
    return fs.stat(file, function(err, stats) {
      if (err) {
        return callback(false);
      }
      if (stats.isDirectory()) {
        file = path.join(file, "index.php");
      } else if (!isPhpFile) {
        return callback(false);
      }
      return callback({
        path: file,
        scriptName: parts.pathname,
        pathInfo: parts.pathInfo,
        query: parts.query
      });
    });
  },
  getEnvironment: function(file, req) {
    var env;
    env = {
      SERVER_SIGNATURE: "NodeJS server at localhost",
      PATH_INFO: file.pathInfo,
      PATH_TRANSLATED: "",
      SCRIPT_NAME: file.scriptName,
      SCRIPT_FILENAME: file.path,
      REQUEST_FILENAME: file.path,
      SCRIPT_URI: req.url,
      URL: req.url,
      SCRIPT_URL: req.url,
      REQUEST_URI: req.url,
      REQUEST_METHOD: req.method,
      QUERY_STRING: file.query || "",
      CONTENT_TYPE: req.get("Content-type") || "",
      CONTENT_LENGTH: req.get("Content-Length") || 0,
      AUTH_TYPE: "",
      AUTH_USER: "",
      REMOTE_USER: "",
      ALL_HTTP: Object.keys(req.headers).map(function(x) {
        return ("HTTP_" + (x.toUpperCase().replace("-", "_")) + ": ") + req.headers[x];
      }).reduce((function(a, b) {
        return a + b + "\n";
      }), ""),
      ALL_RAW: Object.keys(req.headers).map(function(x) {
        return x + ": " + req.headers[x];
      }).reduce((function(a, b) {
        return a + b + "\n";
      }), ""),
      SERVER_SOFTWARE: "NodeJS",
      SERVER_NAME: "localhost",
      SERVER_ADDR: "127.0.0.1",
      SERVER_PORT: 8011,
      GATEWAY_INTERFACE: "CGI/1.1",
      SERVER_PROTOCOL: "",
      REMOTE_ADDR: req.headers['x-forwarded-for'] || req.connection.remoteAddress,
      REMOTE_PORT: "",
      DOCUMENT_ROOT: "",
      INSTANCE_ID: "",
      APPL_MD_PATH: "",
      APPL_PHYSICAL_PATH: "",
      IS_SUBREQ: "",
      REDIRECT_STATUS: 1
    };
    Object.keys(req.headers).map(function(x) {
      return env["HTTP_" + x.toUpperCase().replace("-", "_")] = req.headers[x];
    });
    return env;
  },
  run: function(file, req, res, cm) {
    var buf, cmd, err, headerSent, php;
    err = "";
    cmd = cmd || "php-cgi";
    php = child.spawn(cmd, [], {
      env: this.getEnvironment(file, req)
    });
    php.stdout.pause();
    req.pipe(php.stdin);
    req.resume();
    buf = [];
    headerSent = false;
    php.stdout.on("data", function(data) {
      var body, chunk, h, head, header, i, len;
      if (headerSent) {
        return buf.push(data);
      } else {
        chunk = data.toString('binary');
        body = chunk.split("\r\n\r\n");
        if (body.length > 1) {
          head = body[0].split("\r\n");
          for (i = 0, len = head.length; i < len; i++) {
            header = head[i];
            h = header.split(": ");
            if (h[0] === "Status") {
              res.statusCode = parseInt(h[1]);
            }
            if (h.length === 2) {
              res.setHeader(h[0], h[1]);
            }
          }
          headerSent = true;
          return buf.push(data.slice(body[0].length + 4));
        } else {
          return buf.push(data);
        }
      }
    });
    php.stdout.on("end", function(code) {
      php.stdin.end();
      res.status(res.statusCode).send(Buffer.concat(buf));
      return res.end();
    });
    php.on("error", function(err) {
      return console.error(err);
    });
    return php.stdout.resume();
  }
};
